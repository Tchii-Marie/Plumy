from discord.ext import commands
import discord
import asyncio

class SceneAssistant(commands.Cog):  # nouveau nom unique
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def scene(self, ctx):
        
        questions = [
            "1Ô∏è‚É£ Quel est le **but de la sc√®ne** ? (informer, choquer, √©mouvoir, faire avancer l'intrigue‚Ä¶)",
            "2Ô∏è‚É£ Qui est pr√©sent dans la sc√®ne et **que veulent-ils** ?",
            "3Ô∏è‚É£ Quels **obstacles** ou r√©sistances vont appara√Ætre (internes ou externes) ?",
            "4Ô∏è‚É£ O√π et quand se d√©roule cette sc√®ne ? **D√©cor, ambiance, heure du jour...**",
            "5Ô∏è‚É£ Quelle est la **tension √©motionnelle** principale ? (col√®re, espoir, peur‚Ä¶)",
            "6Ô∏è‚É£ Quelle **action ou interaction cl√©** s'y d√©roule (r√©v√©lation, confrontation, d√©cision‚Ä¶) ?",
            "7Ô∏è‚É£ Que d√©couvre-t-on sur un **personnage, une relation, ou l‚Äôunivers** ?",
            "8Ô∏è‚É£ Quels sont les **√©l√©ments sensoriels** √† inclure ? (sons, lumi√®res, odeurs, d√©tails visuels)",
            "9Ô∏è‚É£ Quelle est la **forme de narration** choisie ? (dialogue, flashback, narration interne‚Ä¶)",
            "üîü Comment cette sc√®ne **fait-elle avancer l‚Äôhistoire** ou pr√©pare-t-elle la suivante ?",
            "1Ô∏è‚É£1Ô∏è‚É£ Y a-t-il un **changement de dynamique** entre les personnages ou dans la situation ?",
            "1Ô∏è‚É£2Ô∏è‚É£ Quels sont les **non-dits**, les sous-entendus, ou les tensions invisibles ?",
            "1Ô∏è‚É£3Ô∏è‚É£ Que ressent le lecteur/spectateur √† la fin de la sc√®ne ?"
        ]

        await ctx.send("üé¨ Plumy t‚Äôaide √† √©crire une sc√®ne vivante. R√©ponds √† chaque question une par une‚ÄØ:")

        reponses = []
        def check(m): return m.author == ctx.author and m.channel == ctx.channel

        for q in questions:
            await ctx.send(q)
            try:
                msg = await self.bot.wait_for("message", check=check, timeout=300)
                reponses.append(msg.content)
            except asyncio.TimeoutError:
                await ctx.send("‚è∞ Temps √©coul√©. Tu peux relancer avec `!scene` quand tu veux.")
                return

        nom_fichier = f"scene_{ctx.author.name}.txt"
        with open(nom_fichier, "w", encoding="utf-8") as f:
            f.write(f"üé¨ Sc√®ne r√©dig√©e par {ctx.author.display_name}\n\n")
            for i in range(len(questions)):
                f.write(f"{questions[i]}\n{reponses[i]}\n\n")

        await ctx.send("‚úÖ Sc√®ne enregistr√©e avec succ√®s üìÅ :", file=discord.File(nom_fichier))

async def setup(bot):
    await bot.add_cog(SceneAssistant(bot))

